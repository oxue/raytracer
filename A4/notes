To properly implement refraction, I first need to have a good way to validate that my results are correct, So use Peter SHirley book 

Fundamentals of Computer Graphics

https://web.stanford.edu/class/cs148/pdf/class_13_reflection_and_transmission.pdf

Low Cost Adaptive Anti-Aliasing for Real-Time Ray-Tracing
Maxim Shevtsov, Mikhail Letavin and Alexey Rukhlinskiy
Intel Corporation
Nizhniy Novgorod, Russia
{maxim.y.shevtsov, mikhail.letavin, alexey.v.rukhlinskiy}@intel.com

Areas that need to be anti aliased are identified by recognizing that average differential between samples, then we shoot more rays more finely. We do this in parallel by doing it in batches

To do soft shadows we add a radius component to the light, then for each shadow ray we generate many shadow rays pointing to random points inside the light, and take the average.

to do motion blkur we take multple samples and use parameter r and d = 0.5 at^2 + vt + d0 to calcupate the oritentation of the object.

ftp://ftp.ecs.csus.edu/clevengr/155/LectureNotes/Fall12/08BumpMappingLectureNotes.pdf

https://hal.inria.fr/inria-00510157/document

http://www.cs.cornell.edu/courses/cs465/2004fa/lectures/22advray/22advray.pdf

http://www.graphicon.ru/html/2010/conference/EN/Se2/02.pdf
http://web.yonsei.ac.kr/wjlee/document/bjjin_HPG.pdf

[x] 1: Implement Cone and Cylinder Primitives  
[x] 2: Texture Mapping  
[x] 3: Normal Mapping  
[x] 4: Adaptive Anti Aliasing  
[x] 5: Glossy Reflection  
[x] 6: Grid Acceleration  
[x] 7: Depth of field  
[x] 8: Motion Blur  
[x] 9: Refraction 
[x] 10: Final Scene 